cmdhistory=["(require '[com.ashafa.clutch \:as clutch])" "(clutch/all-databases)" "(def db (clutch/get-database))" "(clutch/with-db db clutch/all-documents)" "(take 10 (clutch/with-db db clutch/all-documents))" "(take 10 (clutch/all-documents \\"test_docs_en\\"))" "(take 100 (clutch/all-documents \\"test_docs_en\\"))" "(clutch/all-databases)" "(clutch/couchdb-info)" "(gmr-viewer.repl/start-server 4000)" "(gmr-viewer.repl/start-server \\"4000\\")" "(range 10)" "(gmr-viewer.repl/stop-server)" "(gmr-viewer.repl/start-server \\"4000\\")" "(range 10)" "(rand 10)" "(collect-dbs)" "(take 10 (get-db \\"en\\"))" "((get-db \\"en\\") 1)" "(get-document \\"en\\" 1)" "(get-document \\"en\\" \\"BNC_A00.json.gz\:00001\\")" "(collect-dbs)" "(all-collections)" "(start-server 4000)" "(start-server \\"4000\\")" "(stop-server)" "(start-server \\"4000\\")" "(range 10)" "(use 'gmr-viewer.repl)" "(start-server)" "(range 10)" "(range 1 \\n       10)" "(start-server \\"4000\\")" "(stop-server)" "(app)" "(start-server \\"4000\\")" "(timbre/info \\"hello\\")" "(exit)" "(get-document \\"en\\" \\"BNC_A00.json.gz\:00001\\")" "(class (get-document \\"en\\" \\"BNC_A00.json.gz\:00001\\"))" "(class (all-documents \\"en\\"))" "(class (take 10 (all-documents \\"en\\")))" "(generate-string {})" "(generate-string {\:a 1 \:b 2 \:c [3 4]})" "(range 10)" "(dir)" "(html [\:div (list a b)])" "(path)" "(path \\"/js\\")" "(path \\"/js\\" \\"/lib\\")" "(path \\"/js\\" \\"/lib\\" \\"/cacca\\")" "(path \\"/js\\" \\"/lib\\" \\"/cacca\\" \\"/culo\\")" "(doc list*)" "(path \\"/js\\" \\"/lib\\" \\"/cacca\\" \\"/culo\\")" "(apply str (list* \\"A\\" \\"B\\" [\\"C\\" \\"D\\"]))" "(path \\"/js\\" \\"/lib\\" \\"/cacca\\" \\"/culo\\")" "(rand)" "logger" "(start-server \\"4000\\")" "(index \\"xxx\\")" "(clutch/all-documents \\"test_docs_en\\")" "(clutch/all-documents \\"test_docs_en\\" {\:startkey \\"afp_eng_199405_003.json.gz\:07987\\" \:limit 2})" "(clutch/all-documents \\"test_docs_en\\" {\:startkey \\"afp_eng_199405_003.json.gz\:07987\\" \:limit 3})" "(clutch/all-documents \\"test_docs_en\\" {\:startkey \\"afp_eng_199405_003.json.gz\:07987\\" \:limit 3 \:include_docs true})" "(count (clutch/all-documents \\"test_docs_en\\"))" "(clutch/all-documents \\"test_docs_en\\" {\:startkey \\"afp_eng_199405_003.json.gz\:07987\\" \:limit 3 \:include_docs true} {\:text true})" "(clutch/all-documents \\"test_docs_en\\" {\:startkey \\"afp_eng_199405_003.json.gz\:07987\\" \:limit 3 \:include_docs true} {\:ctext true})" "(count (all-documents \\"en\\"))" "(range-documents \\"en\\" \\"BNC_A00.json.gz\:00001\\" 10)" "(clojure.pprint (range-documents \\"en\\" \\"BNC_A00.json.gz\:00001\\" 10))" "(require 'clojure.pprint \:as pprint)" "(require '[clojure.pprint \:as pprint])" "(pprint (range-documents \\"en\\" \\"BNC_A00.json.gz\:00001\\" 10))" "(require [clojure.pprint \:as pprint])" "(require '[clojure.pprint \:as pprint])" "pprint" "(pprint [1 2 3])" "(refer clojure.pprint)" "(refer 'clojure.pprint)" "clojure.pprint" "(dir gmr-viewer)" "(use 'clojure.pprint)" "(clojure.pprint [1 2 3])" "(pprint [1 2 3])" "(pprint (range-documents \\"en\\" \\"BNC_A00.json.gz\:00001\\" 10))" "(doc pprint)" "(clojure.doc pprint)" "(gmr-viewer.repl.doc pprint)" "(gmr-viewer.repl/doc pprint)" "(pprint (range-documents \\"en\\" \\"BNC_A00.json.gz\:00001\\" 2))" "(all-collections)" "(start-server)" "(defn f [a & b] (println a b))" "(f 1)" "(boolean \\"\\")" "(boolean nil)" "(boolean ())" "(boolean 0)" "\!\=" "\=\!" "not\=" "(stop-server)" "(start-server)" "(normalize {})" "(start-server)" "(exit)" "(start-server)" "(use 'gmr-viewer.routes.app \:reload)" "(use 'gmr-viewer.middleware \:reload)" "(use 'gmr-viewer.routes.app \:reload)" "(use 'gmr-viewer.middleware \:reload)" "(start-server)" "(use 'gmr-viewer.routes.app \:reload)" "(start-server)" "(ns 'gmr-viewer.repl)" "(ns gmr-viewer.repl)" "(start-server)" "(ns gmr-viewer.repl)" "(start-server)" "(use 'gmr-viewer.repl \:reload)" "(start-server)" "(use 'gmr-viewer.routes.app \:reload)" "(macroexpand GET)" "(doc \\n  macroexpand)" "(doc macroexpand)" "GET" "(macroexpand '(GET \\"/hello/\:name\\" [name] (hello name)))" "(require '[clojure.pprint \:as pp])" "(pp/pprint (macroexpand '(GET \\"/hello/\:name\\" [name] (hello name))))" "(pp/pprint (macroexpand '(GET \\"/hello/\:name\\" {body \:body} (hello name))))" "(pp/pprint (macroexpand '(GET \\"/hello\\" {body \:body} (hello name))))" "(use 'gmr-viewer.routes.app \:reload)" "(require 'clj-http.core)" "(require [clj-http.client \:as http])" "(require '[clj-http.client \:as http])" "(http/get \\"localhost\:5489\\")" "(http/get \\"http\://localhost\:5489/\\")" "(http/get \\"http\://localhost\:5984/\\")" "(\:body (http/get \\"http\://localhost\:5984/\\"))" "(clojure.pprint/pprint (\:body (http/get \\"http\://localhost\:5984/\\")))" "(clojure.pprint/pprint (\:body (http/get \\"http\://localhost\:5984/\\" {\:accept \:json})))" "(clojure.pprint/pprint (\:body (http/get \\"http\://localhost\:5984/\\" {\:as \:json})))" "(*source-path*)" "(prn *source-path*)" "(source require)" "(clojure.repl/source require)" "(make-index)" "(make-index \\"db\\" \\"test-idx-2\\" (slurp (io/resource \\"indices/ft_es.py\\")) \\"python\\")" "(make-index \\"db\\" \\"test-idx-2\\" \\"lms\\" (slurp (io/resource \\"indices/ft_es.py\\")) \\"python\\")" "(generate-string (make-index \\"db\\" \\"test-idx-2\\" \\"lms\\" (slurp (io/resource \\"indices/ft_es.py\\")) \\"python\\"))" "(clojure.pprint/pprint (generate-string (make-index \\"db\\" \\"test-idx-2\\" \\"lms\\" (slurp (io/resource \\"indices/ft_es.py\\")) \\"python\\")))" "(generate-string (make-index \\"db\\" \\"test-idx-2\\" \\"lms\\" (slurp (io/resource \\"indices/ft_es.py\\")) \\"python\\"))" "(println (generate-string (make-index \\"db\\" \\"test-idx-2\\" \\"lms\\" (slurp (io/resource \\"indices/ft_es.py\\")) \\"python\\")))" "(println (clojure.pprint/pprint (generate-string (make-index \\"db\\" \\"test-idx-2\\" \\"lms\\" (slurp (io/resource \\"indices/ft_es.py\\")) \\"python\\"))))" "(clojure.pprint/pprint (generate-string (make-index \\"db\\" \\"test-idx-2\\" \\"lms\\" (slurp (io/resource \\"indices/ft_es.py\\")) \\"python\\")))" "(make-index \\"db\\" \\"test-idx-2\\" \\"lms\\" (slurp (io/resource \\"indices/ft_es.py\\")) \\"python\\")" "(clojure.pprint/pprint \\n  (make-index \\"db\\" \\"test-idx-2\\" \\"lms\\" (slurp (io/resource \\"indices/ft_es.py\\")) \\"python\\"))" "(print \\n  (generate-string (make-index \\"db\\" \\"test-idx-2\\" \\"lms\\" (slurp (io/resource \\"indices/ft_es.py\\")) \\"python\\")))" "(print \\n  (generate-string \\n    (make-index \\"db\\" \\"test-idx-2\\" \\"lms\\" (slurp (io/resource \\"indices/ft_es.py\\")) \\"python\\"))\\n  \:pretty true)" "(print \\n  (encode\\n    (make-index \\"db\\" \\"test-idx-2\\" \\"lms\\" (slurp (io/resource \\"indices/ft_es.py\\")) \\"python\\"))\\n  \:pretty true)" "(print \\n  (encode\\n    (make-index \\"db\\" \\"test-idx-2\\" \\"lms\\" (slurp (io/resource \\"indices/ft_es.py\\")) \\"python\\")\\n  \:pretty true))" "(print \\n  (encode\\n    (make-index \\"db\\" \\"test-idx-2\\" \\"lms\\" (slurp (io/resource \\"indices/ft_es.py\\")) \\"python\\")\\n  {\:pretty true}))" "(print \\n  (encode\\n    (make-index \\"test_docs_en\\" \\"test-idx-3\\" \\"lms\\" (slurp (io/resource \\"indices/ft_es.py\\")) \\"python\\")\\n  {\:pretty true}))" "(print \\n  (encode\\n    (make-index \\"test_docs_en\\" \\"test-idx-5\\" \\"lms\\" (slurp (io/resource \\"indices/ft_es.py\\")) \\"python\\")\\n  {\:pretty true}))" "(defn conn (esr/connect))" "(def conn (esr/connect))" "conn" "(esd/search conn \\"test-idx-5\\" \\"lms\\" \:query (q/query-string \:query \\"source-lemma\:a*\\"))" "(pprint/pprint (esd/search conn \\"test-idx-5\\" \\"lms\\" \:query (q/query-string \:query \\"source-lemma\:a*\\")))" "(pprint/pprint (esd/search conn \\"test-idx-5\\" \\"lms\\" \:query (q/query-string \:query \\"source-lemma\:president\\")))" "(pprint/pprint (esd/search conn \\"test-idx-5\\" \\"lms\\" \:query { \:field { \\"source-lemma\\" \\"president\\" } } ))" "(pprint/pprint (esd/search conn \\"test-idx-5\\" \\"lms\\" \:query (q/field \\"source-lemma\\" \\"president\\")))" "q" "(pprint/pprint (esd/search conn \\"test-idx-5\\" \\"lms\\" \:query {\:field {\\"lms.source-lemma\\" \\"president\\"}}))" "(pprint/pprint (esd/search conn \\"test-idx-5\\" \\"lms\\" \:query {\:field {\\"source-lemma\\" \\"president\\"}}))" "(pprint/pprint (esd/search conn \\"test-idx-5\\" \\"lms\\" \:query {q/query-string \:source-lemma \\"president\\"}))" "(pprint/pprint (esd/search conn \\"test-idx-5\\" \\"lms\\" \:query (q/query-string \:source-lemma \\"president\\")))" "(pprint/pprint (esd/search conn \\"test-idx-5\\" \\"lms\\" \\n                           \:query (q/query-string \:source-lemma \\"a*\\")))" "(pprint/pprint (esd/search conn \\"test-idx-5\\" \\"lms\\" \\n                           \:query (q/term \:source-lemma \\"a*\\")))" "(pprint/pprint (esd/search conn \\"test-idx-5\\" \\"lms\\" \\n                           \:query (q/term \:source-lemma \\"president\\")))" "(pprint/pprint (esd/search conn \\"test-idx-5\\" \\"lms\\" \\n                           \:query (q/term \:source-lemma \\"p*\\")))" "(def conn (esr/connect))" "(pprint/pprint (esd/search conn \\"test-idx-5\\" \\"lms\\" \\n                           \:query (q/term \:source-lemma \\"p*\\")))" "(pprint/pprint (esd/search conn \\"test-idx-5\\" \\"lms\\" \\n                           \:query (q/query-string \:source-lemma \\"a*\\")))" "(pprint/pprint (esd/search conn \\"test-idx-5\\" \\"lms\\" \\n                           \:query (q/filtered \:source-lemma \\"a*\\")))" "(pprint/pprint (esd/search conn \\"test-idx-5\\" \\"lms\\" \\n                           \:filter (q/filtered \:source-lemma \\"a*\\")))" "(q/filtered \:source-lemma \\"a*\\")" "(q/term \:source-lemma \\"a*\\")" "(q/query-string \:source-lemma \\"a*\\")" "(q/query-string \\"source-lemma\:b*\\")" "(q/query-string \:source-lemma \\"a*\\")" "(pprint/pprint (esd/search conn \\"test-idx-5\\" \\"lms\\" \\n                           \:query (q/query-string \:source-lemma \\"a*\\")))" "(esd/search-all-types conn \\"test-idx-5\\" (q/query-string \:source-lemma \\"b*\\"))" "(esd/search conn \\"test-idx-5\\" \\"lms\\" (q/prefix \:source-lemma \\"b\\"))" "(esd/search conn \\"test-idx-5\\" \\"lms\\" \:query (q/prefix \:source-lemma \\"b\\"))" "(pprint/pprint (esd/search conn \\"test-idx-5\\" \\"lms\\" \:query (q/prefix \:source-lemma \\"b\\")))" "(pprint/pprint (esd/search conn \\"test-idx-5\\" \\"lms\\" \:query (q/prefix \:source-concept \\"b\\")))" "(pprint/pprint (esd/search conn \\"test-idx-5\\" \\"lms\\" \:query (q/query-string \\"source-concept\:b*\\")))" "(pprint/pprint (esd/search conn \\"test-idx-5\\" \\"lms\\" \:query (q/query-string \:query-string \\"source-concept\:b*\\")))" "(pprint/pprint (esd/search conn \\"test-idx-5\\" \\"lms\\" \:query (q/query-string \:query-string \\"source-concept\:'b*'\\")))" "(pprint/pprint (esd/search conn \\"test-idx-5\\" \\"lms\\" \:query (q/query-string \:query-string \\"source-concept\:b\\")))" "(pprint/pprint (esd/search conn \\"test-idx-5\\" \\"lms\\" \:query (q/query-string \:source-concept \\"b*\\")))" "(pprint/pprint (esd/search conn \\"test-idx-5\\" \\"lms\\" \:query (q/query-string \:source-concept \\"b\\")))" "(q/query-string \:source-concept \\"b\\")" "(pprint/pprint (esd/search conn \\"test-idx-5\\" \\"lms\\" \:query (q/query-string \:source-concept \\"b\\")))" "(use 'clojure.tools.trace)" "(trace-vars esd)" "(trace-ns esd)" "(trace-ns clojurewerkz.elastisch.query)" "(trace-ns 'clojurewerkz.elastisch.query)" "(trace-ns 'clojurewerkz.elastisch.rest)" "(pprint/pprint (esd/search conn \\"test-idx-5\\" \\"lms\\" \:query (q/query-string \:source-concept \\"b\\")))" "(pprint/pprint (esd/search conn \\"test-idx-5\\" \\"lms\\" \:query (q/prefix \:source-concept \\"b\\")))" "(pprint/pprint (esd/search conn \\"test-idx-5\\" \\"lms\\" \:query (q/query-string \:source-concept \\"b\\")))" "(pprint/pprint (esd/search conn \\"test-idx-5\\" \\"lms\\" (q/query-string \:source-concept \\"b\\")))" "(pprint/pprint (esd/search conn \\"test-idx-5\\" \\"lms\\" (q/query-string \:query \\"source-concept\:b*\\")))" "(pprint/pprint (esd/search conn \\"test-idx-5\\" \\"lms\\" (q/query-string \\"source-concept\:b*\\")))" "(pprint/pprint (esd/search conn \\"test-idx-5\\" \\"lms\\" (q/query-string \:query \\"source-concept\:b*\\")))" "(pprint/pprint (esd/search conn \\"test-idx-5\\" \\"lms\\" (q/query-string \:fields [\\"source-concept\\"]\\n                                                                   \:query \\"b*\\")))" "(pprint/pprint (esd/search conn \\"test-idx-5\\" \\"lms\\" \:query (q/query-string \:query \\"source-lemma\:b*\\")))" "(pprint/pprint (esd/search conn \\"test-idx-5\\" \\"lms\\" \:query {\:query_string {\:query \\"source-lemma\:b*\\"}}))" "(pprint/pprint (esd/search conn \\"test-idx-5\\" \\"lm\\" \:query {\:query_string {\:query \\"source-lemma\:b*\\"}}))" "(pprint/pprint (esd/search conn \\"test-idx-5\\" \\"lm\\" \:query {\:query_string {\:query \\"source-concept\:b*\\"}}))" "(pprint/pprint (esd/search conn \\"test-idx-5\\" \\"lm\\" \:filter {\:query_string {\:query \\"source-concept\:b*\\"}}))" "(clutch/all-documents \\"test_docs_en\\")" "(get-documents \\"es\\" [\\"BNC_A00.json.gz\:00001\\"]" ")" "(get-documents \\"es\\" [\\"BNC_A00.json.gz\:00001\\"])" "(get-documents \\"es\\" [\\"BNC_A00.json.gz\:00001\\" \\"BNC_A00.json.gz\:00002\\"])" "(get-documents \\"en\\" [\\"BNC_A00.json.gz\:00001\\" \\"BNC_A00.json.gz\:00002\\"])" "(get-db \\"en\\")" "(get-documents \\"en\\" [\\"BNC_A00.json.gz\:00001\\" \\"BNC_A00.json.gz\:00002\\"])" "(pprint/pprint (get-documents \\"en\\" [\\"BNC_A00.json.gz\:00001\\" \\"BNC_A00.json.gz\:00002\\"]))" "(pprint/pprint (get-documents \\"en\\" [\\"BNC_A00.json.gz\:00001\\"]))" "(esd/search (esr/connect) \\"lms-idx\\" \\"lm\\" (q/bool (\:query {\:bool {\:must {\:term {\:source-lemma \\"graduation\\"}}}})))" "(q/bool)" "(esd/search (esr/connect) \\"lms-idx\\" \\"lm\\" \:query (q/bool {\:must {\:term {\:source-lemma \\"graduation\\"}}}))" "(esd/search (esr/connect) \\"test-idx-5\\" \\"lm\\" \:query (q/bool {\:must {\:term {\:source-lemma \\"graduation\\"}}}))" "(pprint/pprint (esd/search (esr/connect) \\"test-idx-5\\" \\"lm\\" \:query (q/bool {\:must {\:term {\:source-lemma \\"graduation\\"}}})))" "(pprint/pprint (esd/search (esr/connect) \\"test-idx-5\\" \\"lm\\" \:query (q/bool {\:must {\:regexp {\:source-lemma \\"g*\\"}}})))" "(pprint/pprint (esd/search (esr/connect) \\"test-idx-5\\" \\"lm\\" \:query (q/bool {\:must {\:regexp {\:source-lemma \\"g.*\\"}}})))" "(doc pprint/pprint)" "(clojure.repl/doc pprint/pprint)" "(use 'clojure.repl)" "(doc pprint/pprint)" "(pprint/pprint (esd/search (esr/connect) \\"test-idx-5\\" \\"lm\\" \:query {\:bool {\:must {\:regexp {\:source-lemma \\"g.*\\"}}}}))" "(pprint/pprint (esd/search (esr/connect) \\n                           \\"test-idx-5\\" \\"lm\\" \\n                           \:query {\:bool {\:must {\:regexp {\:source-lemma \\"g.*\\"}}}}\\n                           \:start 0 \:limit 2))" "(pprint/pprint (esd/search (esr/connect) \\n                           \\"test-idx-5\\" \\"lm\\" \\n                           \:query {\:bool {\:must {\:regexp {\:source-lemma \\"g.*\\"}}}}\\n                           \:limit 2))" "(pprint/pprint (esd/search (esr/connect) \\n                           \\"test-idx-5\\" \\"lm\\" \\n                           \:query {\:bool {\:must {\:regexp {\:source-lemma \\"g.*\\"}}}}\\n                           ))" "(pprint/pprint (esd/search (esr/connect) \\n                           \\"lms-idx\\" \\"lm\\" \\n                           \:query {\:bool {\:must {\:regexp {\:source-lemma \\"g.*\\"}}}}\\n                           ))" "(pprint/pprint (esd/search (esr/connect) \\n                           \\"lms-idx\\" \\"lm\\" \\n                           \:query {\:bool {\:must {\:regexp {\:target-concept \\"l.*\\"}}}}\\n                           ))" "(pprint/pprint (esd/search (esr/connect) \\n                           \\"lms-idx\\" \\"lm\\" \\n                           \:query {\:bool {\:must {\:regexp {\:target-concept \\"l.*\\"}}}}\\n                           \:size 2))" "(pprint/pprint (esd/search (esr/connect) \\n                           \\"lms-idx\\" \\"lm\\" \\n                           \:query {\:bool {\:must {\:regexp {\:target-concept \\"l.*\\"}}}}\\n                           \:size 100))" "(def lms (esd/search (esr/connect) \\n                     \\"lms-idx\\" \\"lm\\" \\n                     \:query {\:bool {\:must {\:regexp {\:target-concept \\"l.*\\"}}}}\\n                     \:size 12))" "lms" "(pprint/pprint lms)" "(map \:_id (get-in [\:hits \:hits] lms))" "(get-in [\:hits \:hits] lms)" "(get-in [\\"hits\\" \\"hits\\"] lms)" "lms" "(\:hits lms)" "(\:hits (\:hits lms))" "(get-in [\:hits \:hits] lms)" "(doc get-in)" "(get-in lms [\:hits \:hits])" "(map \:_id (get-in lms [\:hits \:hits]))" "(set (map \:_id (get-in lms [\:hits \:hits])))" "(pprint/pprint (get-documents \\"en\\" [\\"BNC_A00.json.gz\:00001\\"]))" "(pprint/pprint (get-documents \\"en\\" (set \\"BNC_A00.json.gz\:00001\\")))" "(set \\"a\\" \\"b\\" \\"C\\")" "(doc set)" "(pprint/pprint (get-documents \\"en\\" (set [\\"BNC_A00.json.gz\:00001\\"])))" "(\:a {})" "(if (\:a {}) \:yes \:no)" "(esd/search (esr/connect) \\"lms-idx\\" \\"lm\\"\\r\\n                        \:query {\:match_all {}} \\r\\n                        (when flt {\:filter flt})\\r\\n                        \:_source true)" "(def flt nil)" "(esd/search (esr/connect) \\"lms-idx\\" \\"lm\\"\\r\\n                        \:query {\:match_all {}} \\r\\n                        (when flt {\:filter flt})\\r\\n                        \:_source true)" "(when flt {\:filter flt})" "(def flt {\:a \:b})" "(esd/search (esr/connect) \\"lms-idx\\" \\"lm\\"\\r\\n                        \:query {\:match_all {}} \\r\\n                        (when flt {\:filter flt})\\r\\n                        \:_source true)" "(when flt {\:filter flt})" "(when flt list(\:filter flt))" "(when flt (list \:filter flt))" "(when flt ~@(list \:filter flt))" "(when flt ~(list \:filter flt))" "(when flt `(list \:filter flt))" "(when flt `(\:filter flt))" "({} \:a)" "({\:a \:b} \:a)" "({\:a \:b} \:c \:d)" "(\:e {\:a \:b} \:c \:d)" "(\:e {\:a \:b} \:c)" "(esd/search (esr/connect) \\"lms-idx\\" \\"lm\\"\\r\\n                        \:query {\:match_all {}} \\r\\n                        (\:filter flt {})\\r\\n                        \:_source true)" "(\:filter flt {})" "(esd/search (esr/connect) \\"lms-idx\\" \\"lm\\"\\r\\n                        \:query {\:match_all {}} \\r\\n                        \:filter (\:filter flt {})\\r\\n                        \:_source true)" "(def flt nil)" "(esd/search (esr/connect) \\"lms-idx\\" \\"lm\\"\\r\\n                        \:query {\:match_all {}} \\r\\n                        \:filter (\:filter flt {})\\r\\n                        \:_source true)" "(assoc-in {} [\:a \:b \:c] \\"culo\\")" "(io/resource \\"indices/lm-updates.js\\")" "(io/resource \\"indices/lm_updates.js\\")" "(io/resource \\"indices/lm_update.js\\")" "(slurp (io/resource \\"indices/lm_update.js\\"))" "(save-updates \\"test_docs_en\\" \:javascrip (slurp (io/resource \\"indices/lm_update.js\\")))" "(save-updates \\"test_docs_en\\" \:javascript (slurp (io/resource \\"indices/lm_update.js\\")))" "(use 'clojure.tools.trace)" "(trace-ns clutch)" "(trace-ns 'clutch)" "(trace-ns 'clutch\\n          )" "(trace-ns 'com.ashafa.clutch)" "(save-updates \\"test_docs_en\\" \:javascript (slurp (io/resource \\"indices/lm_update.js\\")))" "(save-updates \\"test_docs_en\\" \:lm \:javascript (slurp (io/resource \\"indices/lm_update.js\\")))" "(save-updates \\"test_docs_en\\" \:javascript (slurp (io/resource \\"indices/lm_update.js\\")))" "(save-updates \\"test_docs_en\\" [\:javascript (slurp (io/resource \\"indices/lm_update.js\\"))])" "(save-updates \\"test_docs_en\\" \:javascript (slurp (io/resource \\"indices/lm_update.js\\")))" "(name \:abc)" "(save-updates \\"test_docs_en\\" \:javascript (slurp (io/resource \\"indices/lm_update.js\\")))" "(defn f [x y & args]\\n  (println args))" "(f 1 2 3 4 5 6 )" "(save-updates \\"test_docs_en\\" \\"lm\\" \:javascript (slurp (io/resource \\"indices/lm_update.js\\")))" "(save-updates \\"test_docs_en\\" \\"lm\\" [\:javascript (slurp (io/resource \\"indices/lm_update.js\\"))])" "(untrace-ns 'com.ashafa.clutch)" "(save-updates \\"test_docs_en\\" \\"lm\\" [\:javascript (slurp (io/resource \\"indices/lm_update.js\\"))])" "(save-updates \\"test_docs_en\\" \\"lms\\" [\:javascript (slurp (io/resource \\"indices/lm_update.js\\"))])" "(save-updates \\"test_docs_en\\" \\"lms\\" [\:javascript {\:in-place (slurp (io/resource \\"indices/lm_update.js\\"))}])" "(-main)" "(pprint/pprint (-main))" "(search-lms \\"test_docs_en\\" {\:filter {\:bool {\:must {\:regexp {\:source-lemma \\"z.*\\"}}}}})" "(search-lms \\"en\\" {\:filter {\:bool {\:must {\:regexp {\:source-lemma \\"z.*\\"}}}}})" "(pprint/pprint (search-lms \\"en\\" {\:filter {\:bool {\:must {\:regexp {\:source-lemma \\"z.*\\"}}}}}))" "(pprint/pprint (get-documents [\\"BNC_A00.json.gz\:00001\\"]))" "(pprint/pprint (get-documents \\"en\\" [\\"BNC_A00.json.gz\:00001\\"]))" "(pprint/pprint (map \#(select-keys  (\:doc %) [\:text \:word \:lms]) (get-documents \\"en\\" [\\"BNC_A00.json.gz\:00001\\"])))" "(pprint/pprint (map \#(select-keys  (\:doc %) [\:_id _\:rev \:n \:file \:text \:word \:lms]) (get-documents \\"en\\" [\\"BNC_A00.json.gz\:00001\\"])))" "(pprint/pprint (map \#(select-keys  (\:doc %) [\:_id \:_rev \:n \:file \:text \:word \:lms]) (get-documents \\"en\\" [\\"BNC_A00.json.gz\:00001\\"])))" "(pprint/pprint (search-lms \\"en\\" {\:filter {\:bool {\:must {\:regexp {\:source-lemma \\"z.*\\"}}}}}))" "(pprint/pprint (decode (search-lms \\"en\\" {\:filter {\:bool {\:must {\:regexp {\:source-lemma \\"z.*\\"}}}}})))" "(pprint/pprint (generate-string (search-lms \\"en\\" {\:filter {\:bool {\:must {\:regexp {\:source-lemma \\"z.*\\"}}}}})))" "(pprint/pprint (parse-string (search-lms \\"en\\" {\:filter {\:bool {\:must {\:regexp {\:source-lemma \\"z.*\\"}}}}})))" "(pprint/pprint search-lms \\"en\\" {\:filter {\:bool {\:must {\:regexp {\:source-lemma \\"z.*\\"}}}}}))" "(pprint/pprint (search-lms \\"en\\" {\:filter {\:bool {\:must {\:regexp {\:source-lemma \\"z.*\\"}}}}}))" "(make-index \\"test_docs_en\\" \\"lms-index\\" \\"lm\\" (slurp (io/resource \\"indices/ft_es.py\\" \\"python\\")))" "(make-index \\"test_docs_en\\" \\"lms-index\\" \\"lm\\" (slurp (io/resource \\"indices/ft_es.py\\") \\"python\\"))" "(make-index \\"test_docs_en\\" \\"lms-index\\" \\"lm\\" (slurp (io/resource \\"indices/ft_es.py\\")) \\"python\\")" "(pprint/pprint (make-index \\"test_docs_en\\" \\"lms-index\\" \\"lm\\" (slurp (io/resource \\"indices/ft_es.py\\")) \\"python\\"))" "(require '[clojure.pprint \:as pp])" "(pp/pprint (make-index \\"test_docs_en\\" \\"lms-index\\" \\"lm\\" (slurp (io/resource \\"indices/ft_es.py\\")) \\"python\\"))" "(pp/pprint (encode (make-index \\"test_docs_en\\" \\"lms-index\\" \\"lm\\" (slurp (io/resource \\"indices/ft_es.py\\")) \\"python\\")))" "(encode (make-index \\"test_docs_en\\" \\"lms-index\\" \\"lm\\" (slurp (io/resource \\"indices/ft_es.py\\")) \\"python\\"))" "(encode (make-index \\"test_docs_en\\" \\"lms-index\\" \\"lm\\" (slurp (io/resource \\"indices/ft_es.py\\")) \\"python\\") \:pretty)" "(encode (make-index \\"test_docs_en\\" \\"lms-index\\" \\"lm\\" (slurp (io/resource \\"indices/ft_es.py\\")) \\"python\\") \\n        \:pretty)" "(encode {\:a \:b \:c [1 2 3]})" "(encode {\:a \:b \:c [1 2 3]} \:pretty true)" "(encode {\:a \:b \:c [1 2 3]} {\:pretty true})" "(pp/pprint (encode {\:a \:b \:c [1 2 3]} {\:pretty true}))" "(println (encode {\:a \:b \:c [1 2 3]} {\:pretty true}))" "(println (encode {\:a \:b \:c [1 2 3]} {\:pretty false}))" "(println (encode {\:a \:b \:c [1 2 3]} {\:pretty true}))" "(println (encode (make-index \\"test_docs_en\\" \\"lms-index\\" \\"lm\\" (slurp (io/resource \\"indices/ft_es.py\\")) \\"python\\") \\n                 {\:pretty true}))" "(pprint/pprint (search-lms \\"en\\" {\:filter {\:bool {\:must [{\:regexp {\:source-lemma \\"z.*\\"}}]}}}))" "(pp/pprint (search-lms \\"en\\" {\:filter {\:bool {\:must [{\:regexp {\:source-lemma \\"z.*\\"}}]}}}))" "(pprint/pprint (search-lms \\"en\\" {\:filter {\:bool {\:must [{\:regexp {\:source-lemma \\"z.*\\"}}]}}}))" "(pprint/pprint (search-lms \\"en\\" {\:filter {\:bool {\:must [{\:regexp {\:source-lemma \\"a.*\\"}}]}}}))" "(pprint/pprint (search-lms \\"en\\" {\:filter {\:bool {\:must {\:regexp {\:source-lemma \\"a.*\\"}}}}}))" "(pprint/pprint (search-lms \\"en\\" {\:filter {\:bool {\:must [{\:regexp {\:source-lemma \\"z.*\\"}}]}}}))" "(encode (make-index \\"test_docs_en\\" \\"lms-index\\" \\"lm\\" (slurp (io/resource \\"indices/ft_es.py\\")) \\"python\\") \:pretty)" "(clojure.pprint/pprint (encode (make-index \\"test_docs_en\\" \\"lms-index\\" \\"lm\\" (slurp (io/resource \\"indices/ft_es.py\\")) \\"python\\") \:pretty))" "(encode (make-index \\"test_docs_en\\" \\"lms-index\\" \\"lm\\" (slurp (io/resource \\"indices/ft_es.py\\")) \\"python\\") \:pretty true)" "(encode (make-index \\"test_docs_en\\" \\"lms-index\\" \\"lm\\" (slurp (io/resource \\"indices/ft_es.py\\")) \\"python\\") {\:pretty true})" "(println (encode (make-index \\"test_docs_en\\" \\"lms-index\\" \\"lm\\" (slurp (io/resource \\"indices/ft_es.py\\")) \\"python\\") \\n                 {\:pretty true}))" "(search-lms en" "(search-lms en {\:bool {\:must {\:regexp {\:source-lemma \\"f.*\\"}}}})" "(search-lms \\"en\\" {\:bool {\:must {\:regexp {\:source-lemma \\"f.*\\"}}}})" "(search-lms \\"en\\" 20 \\"BNC_A00.json.gz\:00344\\"{\:bool {\:must {\:regexp {\:source-lemma \\"f.*\\"}}}})" "(search-lms \\"en\\" 20 \\"BNC_A00.json.gz\:00344\\" {\:bool {\:must {\:regexp {\:source-lemma \\"f.*\\"}}}})" "(json-response (search-lms \\"en\\" 20 \\"BNC_A00.json.gz\:00344\\" {\:bool {\:must {\:regexp {\:source-lemma \\"f.*\\"}}}} {\:pretty true})" "(doc json-response)" "(clojure.repl/doc json-response)" "(json-response (search-lms \\"en\\" 20 \\"BNC_A00.json.gz\:00344\\" {\:bool {\:must {\:regexp {\:source-lemma \\"f.*\\"}}}})\\n                           {\:pretty true})" "(pprint (json-response (search-lms \\"en\\" 20 \\"BNC_A00.json.gz\:00344\\" {\:bool {\:must {\:regexp {\:source-lemma \\"f.*\\"}}}})\\n                               {\:pretty true}))" "(clojure.pprint/pprint (json-response (search-lms \\"en\\" 20 \\"BNC_A00.json.gz\:00344\\" {\:bool {\:must {\:regexp {\:source-lemma \\"f.*\\"}}}})\\n                                  {\:pretty true}))" "(clojure.pprint/pprint (generate-string (search-lms \\"en\\" 20 \\"BNC_A00.json.gz\:00344\\" {\:bool {\:must {\:regexp {\:source-lemma \\"f.*\\"}}}})\\n                                  {\:pretty true}))" "(clojure.pprint/pprint (encode (search-lms \\"en\\" 20 \\"BNC_A00.json.gz\:00344\\" {\:bool {\:must {\:regexp {\:source-lemma \\"f.*\\"}}}})\\n                               {\:pretty true}))" "(println (encode (search-lms \\"en\\" 20 \\"BNC_A00.json.gz\:00344\\" {\:bool {\:must {\:regexp {\:source-lemma \\"f.*\\"}}}})\\n               {\:pretty true}))" "(println (encode (get-in (search-lms \\"en\\" 20 \\"BNC_A00.json.gz\:00344\\" {\:bool {\:must {\:regexp {\:source-lemma \\"f.*\\"}}}}) [\:docs 0])\\n                 {\:pretty true}))" "(println (encode (get-in (search-lms \\"en\\" 20 \\"BNC_A00.json.gz\:00344\\" {\:bool {\:must {\:regexp {\:source-lemma \\"f.*\\"}}}}) [0 \:docs])\\n                 {\:pretty true}))" "(println (encode (\:docs (search-lms \\"en\\" 20 \\"BNC_A00.json.gz\:00344\\" {\:bool {\:must {\:regexp {\:source-lemma \\"f.*\\"}}}}))\\n                 {\:pretty true}))" "(println (encode (get (search-lms \\"en\\" 20 \\"BNC_A00.json.gz\:00344\\" {\:bool {\:must {\:regexp {\:source-lemma \\"f.*\\"}}}}) [0 \:docs])\\n                 {\:pretty true}))" "(println (encode (get (search-lms \\"en\\" 20 \\"BNC_A00.json.gz\:00344\\" {\:bool {\:must {\:regexp {\:source-lemma \\"f.*\\"}}}}) [\:docs])\\n                 {\:pretty true}))" "(println (encode (get-in (search-lms \\"en\\" 20 \\"BNC_A00.json.gz\:00344\\" {\:bool {\:must {\:regexp {\:source-lemma \\"f.*\\"}}}}) [\:docs])\\n                 {\:pretty true}))" "(println (encode (get-in (search-lms \\"en\\" 20 \\"BNC_A00.json.gz\:00344\\" {\:bool {\:must {\:regexp {\:source-lemma \\"f.*\\"}}}}) [\:docs 0])\\n                 {\:pretty true}))" "(println (encode (get-in (search-lms \\"en\\" 20 \\"BNC_A00.json.gz\:00344\\" {\:bool {\:must {\:regexp {\:source-lemma \\"f.*\\"}}}}) [\:docs 1])\\n                 {\:pretty true}))" "(get-in {\:a [1 2 3] \:b \:c} [\:a 0])" "(println (encode (get-in (search-lms \\"en\\" 1 \\"BNC_A00.json.gz\:00344\\" {\:bool {\:must {\:regexp {\:source-lemma \\"f.*\\"}}}}) [\:docs 1])\\n                 {\:pretty true}))" "(println (encode (search-lms \\"en\\" 1 \\"BNC_A00.json.gz\:00344\\" {\:bool {\:must {\:regexp {\:source-lemma \\"f.*\\"}}}})\\n                 {\:pretty true}))" "(println (encode (\:id (search-lms \\"en\\" 1 \\"BNC_A00.json.gz\:00344\\" {\:bool {\:must {\:regexp {\:source-lemma \\"f.*\\"}}}})\\n                 {\:pretty true})))" "(println (encode (\:id (search-lms \\"en\\" 1 \\"BNC_A00.json.gz\:00344\\" {\:bool {\:must {\:regexp {\:source-lemma \\"f.*\\"}}}}))\\n                 {\:pretty true}))" "(println (encode (search-lms \\"en\\" 1 \\"BNC_A00.json.gz\:00344\\" {\:bool {\:must {\:regexp {\:source-lemma \\"f.*\\"}}}})\\n                 {\:pretty true}))" "(println (encode (\:docs (search-lms \\"en\\" 1 \\"BNC_A00.json.gz\:00344\\" {\:bool {\:must {\:regexp {\:source-lemma \\"f.*\\"}}}}))\\n                 {\:pretty true}))" "(println (encode (get-in (search-lms \\"en\\" 1 \\"BNC_A00.json.gz\:00344\\" {\:bool {\:must {\:regexp {\:source-lemma \\"f.*\\"}}}}) [\:docs 0])\\n                 {\:pretty true}))" "(println (encode (get-in (search-lms \\"en\\" 1 \\"BNC_A00.json.gz\:00344\\" {\:bool {\:must {\:regexp {\:source-lemma \\"f.*\\"}}}}) [\:docs])\\n                 {\:pretty true}))" "(println (encode (get-in (search-lms \\"en\\" 1 \\"BNC_A00.json.gz\:00344\\" {\:bool {\:must {\:regexp {\:source-lemma \\"f.*\\"}}}}) [\:docs 0])\\n                 {\:pretty true}))" "(println (encode (get-in (search-lms \\"en\\" 1 \\"BNC_A00.json.gz\:00344\\" {\:bool {\:must {\:regexp {\:source-lemma \\"f.*\\"}}}}) [\:docs 1])\\n                 {\:pretty true}))" "(get [1 2 3] 0)" "(println (encode (get-in (search-lms \\"en\\" 1 \\"BNC_A01.json.gz\:00344\\" {\:bool {\:must {\:regexp {\:source-lemma \\"f.*\\"}}}}) [\:docs 1])\\n                 {\:pretty true}))" "(println (encode (get-in (search-lms \\"en\\" 1 \\"BNC_A01.json.gz\:00344\\" {\:bool {\:must {\:regexp {\:source-lemma \\"f.*\\"}}}}) [\:docs])\\n                 {\:pretty true}))" "(get-document \\"en\\" \\"BNC_A00.json.gz\:00091\\")" "(get-document \\"en\\" \\"BNC_A00.json.gz\:00092\\")" "(cons 1 2)" "(cons 1 nil)" "(reduce + [1 2 3])" "(reduce (fn [x xs] \\n          (if (\= x (first xs))\\n            xs\\n            (cons x xs)))\\n        []\\n        [1 2 3 3 3 4 5])" "(doc reduce)" "(reduce (fn [xs x] \\n          (if (\= x (first xs))\\n            xs\\n            (cons x xs)))\\n        []\\n        [1 2 3 3 3 4 5])" "(use 'clojure.repl)" "(doc reduce)" "(doc conj\\n     )" "(reduce (fn [xs x] \\n          (if (\= x (first xs))\\n            xs\\n            (conj xs s)))\\n        []\\n        [1 2 3 3 3 4 5])" "(reduce (fn [xs x] \\n          (if (\= x (first xs))\\n            xs\\n            (conj xs x)))\\n        []\\n        [1 2 3 3 3 4 5])" "(doc \=)" "(reduce (fn [xs x] \\n          (if (\= x (first xs))\\n            xs\\n            (conj xs x)))\\n        []\\n        [1 2 3 3 3 4 4 5 -1])" "(reduce (fn [xs x] \\n          (if (\= x (first xs))\\n            xs\\n            (cons x xs)))\\n        []\\n        [1 2 3 3 3 4 4 5 -1])" "(doc list)" "(reduce (fn [xs x] \\n          (if (\= x (first xs))\\n            xs\\n            (cons x xs)))\\n        []\\n        (1 2 3 3 3 4 4 5 -1))" "(reduce (fn [xs x] \\n          (if (\= x (first xs))\\n            xs\\n            (cons x xs)))\\n        nil\\n        (1 2 3 3 3 4 4 5 -1))" "(reduce (fn [xs x] \\n          (if (\= x (first xs))\\n            xs\\n            (cons x xs)))\\n        nil\\n        '(1 2 3 3 3 4 4 5 -1))" "(reduce (fn [xs x] \\n          (if (\= x (last xs))\\n            xs\\n            (conj xs x)))\\n        []\\n        (1 2 3 3 3 4 4 5 -1))" "(reduce (fn [xs x] \\n          (if (\= x (last xs))\\n            xs\\n            (conj xs x)))\\n        []\\n        [1 2 3 3 3 4 4 5 -1])" "(reduce (fn [xs x] \\n          (if (\= x (last xs))\\n            xs\\n            (conj xs x)))\\n        []\\n        (seq [1 2 3 3 3 4 4 5 -1]))" "(seq [1 2 3])" "(doc seq)" "(class (seq [1 2 3]))" "(set [1 2 3 4 5])" "(uniq [1 2 3])" "(seq [1 2 3])" "(uniq [1 2 3])" "(clojure.tools.trace 'reduce)" "(clojure.tools.trace/trace 'reduce)" "(uniq [1 2 3])" "(uniq '[1 2 3])" "(clojure.tools.trace/trace 'uniq)" "(uniq '[1 2 3])" "[1 2 3]" "(seq [1 2 3])" "(uniq \\n  [1 2 3])" "(\#(if (\= %1 (last %2)) %2 (conj %2 %1)) 'a [])" "(reduce \#(if (\= %1 (last %2)) %2 (conj %2 %1)) [] [1 2 3])" "(doc reduce)" "(use 'clojure.repl)" "(doc reduce)" "(reduce \#(if (\= %1 (last %2)) %2 (conj %2 %1)) [] [1 2 3])" "(reduce \#(if (\= %2 (last %1)) %1 (conj %1 %2)) [] [1 2 3])" "(reduce (fn [xs x] \\n          (if (\= x (last xs))\\n            xs\\n            (conj xs x)))\\n        []\\n        [1 2 3 3 3 4 4 5 -1])" "(uniq \\n  [1 2 3])" "(uniq \\n  [1 2 2 2 3 4 7 10])" "(start-server)" "'[a b c d.g e]" "(str '[a b c d.g e])" "(clojure.string/join '/ '[a b c d.g e])" "(clojure.string/join \\\\/ '[a b c d.g e])" "(clojure.string/join '/ '[a b c d.g e])" "(make-index \\"case_study\\" \\"lms-test2\\" (slurp (io/resource \\"indices/ft_es.py\\")))" "(make-index \\"case_study\\" \\"lms-test2\\" (slurp (io/resource \\"indices/ft_es.py\\")) \\"python\\")" "(make-index \\"case_study\\" \\"lms-test2\\" \\"lms\\" (slurp (io/resource \\"indices/ft_es.py\\")) \\"python\\")" "(encode (make-index \\"case_study\\" \\"lms-test2\\" \\"lms\\" (slurp (io/resource \\"indices/ft_es.py\\")) \\"python\\")\\n        {\:pretty true})" "(println (encode (make-index \\"case_study\\" \\"lms-test2\\" \\"lms\\" (slurp (io/resource \\"indices/ft_es.py\\")) \\"python\\")\\n              {\:pretty true}))" "(encode (make-index \\"case_study\\" \\"lms-test2\\" \\"lms2\\" (slurp (io/resource \\"indices/ft_es.py\\")) \\"python\\")\\n        {\:pretty true})" "(println (encode (make-index \\"case_study\\" \\"lms-test2\\" \\"lms2\\" (slurp (io/resource \\"indices/ft_es.py\\")) \\"python\\")\\n              {\:pretty true}))" "(start-server)" "(split \\"test_docs_case_study\\")" "(split \\"test_docs_case_study\\" \#\\"_\\")" "(split \\"test_docs_case_study\\" \#\\"_\\" 1)" "(split \\"test_docs_case_study\\" \#\\"_\\" 2)" "(split \\"test_docs_case_study\\" \#\\"_\\" 3)" "(stop-server)" "(start-server)" "(search-lms \\"case_study\\" 20 \\"\\" {})" "(println (encode (make-index \\"case_study\\" \\"lms-test2\\" \\"lms2\\" (slurp (io/resource \\"indices/ft_es.py\\")) \\"python\\")\\n              {\:pretty true}))" "(println (encode (make-index \\"test_docs_case_study\\" \\"lms-test2\\" \\"lms2\\" (slurp (io/resource \\"indices/ft_es.py\\")) \\"python\\")\\n              {\:pretty true}))" "(start-server)" "(println (encode (make-index \\"test_docs_case_study\\" \\"lms-test2\\" \\"lms2\\" (slurp (io/resource \\"indices/ft_es.py\\")) \\"python\\")\\n              {\:pretty true}))" "(println (encode (make-index \\"test_docs_case_study\\" \\"lms-test3\\" \\"lms3\\" (slurp (io/resource \\"indices/ft2_es.py\\")) \\"python\\")\\n              {\:pretty true}))" "(println (encode (make-index \\"test_docs_en\\" \\"lms-en\\" \\"lms3\\" (slurp (io/resource \\"indices/ft2_es.py\\")) \\"python\\")\\n              {\:pretty true}))" "(println (encode (make-index \\"test_docs_case_study\\" \\"lms-test3\\" \\"lms3\\" (slurp (io/resource \\"indices/ft2_es.py\\")) \\"python\\")\\n              {\:pretty true}))" "(println (encode (make-index \\"test_docs_en\\" \\"lms-en\\" \\"lms3\\" (slurp (io/resource \\"indices/ft2_es.py\\")) \\"python\\")\\n              {\:pretty true}))" "(println (encode (make-index \\"test_docs_test_case\\" \\"lms-test\\" \\"lms3\\" \\n                             (slurp (io/resource \\"indices/ft2_es.py\\")) \\n                             \\"python\\")\\n              {\:pretty true}))" "(println (encode (make-index \\"test_docs_en\\" \\"lms-test\\" \\"lms3\\" \\n                             (slurp (io/resource \\"indices/ft2_es.py\\")) \\n                             \\"python\\")\\n              {\:pretty true}))" "(search-lms \\"en\\" 20 \\"christine_blogs_pro_gun_control_08_07_0.json.gz\:00001\\" {})" "(search-lms \\"en\\" 20 \\"BNC_A00.json.gz\:00001\\" {})" "(pprint (search-lms \\"en\\" 20 \\"BNC_A00.json.gz\:00001\\" {}))" "(pprint (search-lms \\"en\\" 5 \\"BNC_A00.json.gz\:00001\\" {}))" "(pprint (search-lms \\"en\\" 1 \\"BNC_A00.json.gz\:00001\\" {}))" "(pprint (search-lms \\"en\\" 1 \\"BNC_A00.json.gz\:00001\\" {\:filter {\\n        \:and {\\n          \:filters [\\n            {\\n              \:query {\\n                \:query_string {\\n                  \:query \\"source-concepts\: /COMP.*/\\"\\n                  \:phrase_slop 100\\n                }\\n              }\\n            }\\n            {\\n              \:prefix {\\n                \:target-schemaname \\"g\\"\\n              }\\n            }\\n          ]\\n        }\\n      }}))" "(println (encode (make-index \\"test_docs_en\\" \\"lms-test\\" \\"lms3\\" \\n                             (slurp (io/resource \\"indices/ft2_es.py\\")) \\n                             \\"python\\")\\n              {\:pretty true}))" "(pprint (search-lms \\"case_study\\" 1 \\"christine_blogs_pro_gun_control_08_07_0.json.gz\:00105\\" {\:filter {\\n        \:and {\\n          \:filters [\\n            {\\n              \:query {\\n                \:query_string {\\n                  \:query \\"source-concepts\: /.*/\\"\\n                  \:phrase_slop 100\\n                }\\n              }\\n            }\\n            {\\n              \:prefix {\\n                \:target-schemaname \\"p\\"\\n              }\\n            }\\n          ]\\n        }\\n      }}))" "(use '[clojure.pprint \:only [pprint]])" "(pprint (search-lms \\"case_study\\" 1 \\"christine_blogs_pro_gun_control_08_07_0.json.gz\:00105\\" {\:filter {\\n        \:and {\\n          \:filters [\\n            {\\n              \:query {\\n                \:query_string {\\n                  \:query \\"source-concepts\: /.*/\\"\\n                  \:phrase_slop 100\\n                }\\n              }\\n            }\\n            {\\n              \:prefix {\\n                \:target-schemaname \\"p\\"\\n              }\\n            }\\n          ]\\n        }\\n      }}))" "(pprint (search-lms \\"case_study\\" 1 \\"christine_blogs_pro_gun_control_08_07_0.json.gz\:00105\\" {\:filter {\\n        \:and {\\n          \:filters [\\n            {\\n              \:prefix {\\n                \:target-schemaname \\"p\\"\\n              }\\n            }\\n          ]\\n        }\\n      }}))" "(pprint (search-lms \\"case_study\\" 1 \\"christine_blogs_pro_gun_control_08_07_0.json.gz\:00105\\" {\:filter {}}))"]
eclipse.preferences.version=1
